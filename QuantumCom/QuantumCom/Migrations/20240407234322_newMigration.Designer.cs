// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace QuantumCom.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240407234322_newMigration")]
    partial class newMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Billings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df7108b0-0222-480b-8fb6-fa039e5aebd5"),
                            Amount = 400m,
                            CustId = new Guid("54e5ce77-c784-42ab-84d0-0b11d5ec43c3")
                        },
                        new
                        {
                            Id = new Guid("aa62935f-3b2b-4121-8448-c494e55530a7"),
                            Amount = 500m,
                            CustId = new Guid("dea1f480-6a7e-4efd-9e26-f4387ee99398")
                        },
                        new
                        {
                            Id = new Guid("ff07f3cb-7589-4e77-b1a9-bf90d0e6faab"),
                            Amount = 1299m,
                            CustId = new Guid("5d1d8eac-2cb6-4f34-9e59-25a3a5ae3473")
                        },
                        new
                        {
                            Id = new Guid("d6a3feb0-6e6c-472b-82fd-ae97b94922af"),
                            Amount = 350m,
                            CustId = new Guid("d576cdc7-927a-408f-833b-dc12fba5c579")
                        },
                        new
                        {
                            Id = new Guid("ec87d4af-74c3-40f5-9add-a430dd551073"),
                            Amount = 699m,
                            CustId = new Guid("207e2d46-5364-4b83-b45c-0c27321f3a88")
                        });
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CCV")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PlansId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlansId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54e5ce77-c784-42ab-84d0-0b11d5ec43c3"),
                            CCV = 111,
                            CardNumber = "0000000000000000",
                            CardType = "Visa",
                            Email = "JohnTest@example.com",
                            ExpirationDate = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Test"
                        },
                        new
                        {
                            Id = new Guid("dea1f480-6a7e-4efd-9e26-f4387ee99398"),
                            CCV = 123,
                            CardNumber = "1234123412341234",
                            CardType = "Mastercard",
                            Email = "Arod@example.com",
                            ExpirationDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Aaron",
                            LastName = "Rodgers"
                        },
                        new
                        {
                            Id = new Guid("5d1d8eac-2cb6-4f34-9e59-25a3a5ae3473"),
                            CCV = 111,
                            CardNumber = "9999999999999999",
                            CardType = "Amex",
                            Email = "KimMC123@example.com",
                            ExpirationDate = new DateTime(2026, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kim",
                            LastName = "Mccrary"
                        },
                        new
                        {
                            Id = new Guid("d576cdc7-927a-408f-833b-dc12fba5c579"),
                            CCV = 421,
                            CardNumber = "8888888888888888",
                            CardType = "Discover",
                            Email = "MarcusPeters@example.com",
                            ExpirationDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marcus",
                            LastName = "Peters"
                        },
                        new
                        {
                            Id = new Guid("207e2d46-5364-4b83-b45c-0c27321f3a88"),
                            CCV = 232,
                            CardNumber = "4321432143214321",
                            CardType = "Apple",
                            Email = "LTaylor@example.com",
                            ExpirationDate = new DateTime(2027, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lorenzo",
                            LastName = "Taylor"
                        });
                });

            modelBuilder.Entity("Entities.CustomerPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CustomerPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d373114-e2fe-449f-9c36-eb50dcb02874")
                        },
                        new
                        {
                            Id = new Guid("0b5c7ab7-b0e6-4265-a8e4-ef6037f03214")
                        },
                        new
                        {
                            Id = new Guid("7d728329-e865-480c-8b50-93ec58617d8f")
                        },
                        new
                        {
                            Id = new Guid("91aca162-93ed-4359-b8e0-22ac8a7998b3")
                        },
                        new
                        {
                            Id = new Guid("0f321dd1-45bd-45ee-861b-cae561131c61")
                        });
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "CustId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb8fa05e-3380-4e4a-bd5e-bc69b401e110"),
                            CustId = new Guid("54e5ce77-c784-42ab-84d0-0b11d5ec43c3"),
                            Name = "Iphone 14",
                            Number = "1111111111"
                        },
                        new
                        {
                            Id = new Guid("067e0b3f-78db-4f7d-b7eb-d2b803d48418"),
                            CustId = new Guid("dea1f480-6a7e-4efd-9e26-f4387ee99398"),
                            Name = "Iphone 12 SE",
                            Number = "9012219981"
                        },
                        new
                        {
                            Id = new Guid("28f8bf3e-a6e5-44f7-963a-109404b3b8ce"),
                            CustId = new Guid("5d1d8eac-2cb6-4f34-9e59-25a3a5ae3473"),
                            Name = "Samsung Galaxy S22 Ultra",
                            Number = "9332910021"
                        },
                        new
                        {
                            Id = new Guid("5bbf569d-a79c-424c-b077-9b6dff481c6b"),
                            CustId = new Guid("d576cdc7-927a-408f-833b-dc12fba5c579"),
                            Name = "Motorola Edge",
                            Number = "4121229921"
                        },
                        new
                        {
                            Id = new Guid("a6cbc0d9-d7a8-47ee-95e7-beecb671613d"),
                            CustId = new Guid("207e2d46-5364-4b83-b45c-0c27321f3a88"),
                            Name = "Iphone 11 S",
                            Number = "3329990192"
                        },
                        new
                        {
                            Id = new Guid("75f89763-1484-456e-a819-3d868343d0c0"),
                            CustId = new Guid("207e2d46-5364-4b83-b45c-0c27321f3a88"),
                            Name = "Blackberry OG",
                            Number = "91119119111"
                        });
                });

            modelBuilder.Entity("Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeviceLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPlanId");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad449f26-1106-417d-9d96-6c4b962b64a8"),
                            DeviceLimit = 2,
                            Name = "Basic",
                            Price = 100m
                        },
                        new
                        {
                            Id = new Guid("d944707b-e51f-4986-9cb5-ab80a87925ea"),
                            DeviceLimit = 5,
                            Name = "Family",
                            Price = 400m
                        },
                        new
                        {
                            Id = new Guid("37efdae3-1f3d-46e0-8a7b-66a3f6bb5ff3"),
                            DeviceLimit = 15,
                            Name = "Unlimited",
                            Price = 700m
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e196366-7ee5-4f92-8313-8cbb4fd32fb8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f0c51658-f60d-4c05-ad9e-3327e5737140",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.HasOne("Entities.CustomerPlan", "Plans")
                        .WithMany()
                        .HasForeignKey("PlansId");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.HasOne("Entities.Customer", null)
                        .WithMany("Devices")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Entities.Plan", b =>
                {
                    b.HasOne("Entities.CustomerPlan", null)
                        .WithMany("Plans")
                        .HasForeignKey("CustomerPlanId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Entities.CustomerPlan", b =>
                {
                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
